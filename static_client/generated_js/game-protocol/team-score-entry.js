// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
export class TeamScoreEntry {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsTeamScoreEntry(bb, obj) {
        return (obj || new TeamScoreEntry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsTeamScoreEntry(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new TeamScoreEntry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    teamId() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
    }
    score() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    static startTeamScoreEntry(builder) {
        builder.startObject(2);
    }
    static addTeamId(builder, teamId) {
        builder.addFieldInt8(0, teamId, 0);
    }
    static addScore(builder, score) {
        builder.addFieldInt32(1, score, 0);
    }
    static endTeamScoreEntry(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createTeamScoreEntry(builder, teamId, score) {
        TeamScoreEntry.startTeamScoreEntry(builder);
        TeamScoreEntry.addTeamId(builder, teamId);
        TeamScoreEntry.addScore(builder, score);
        return TeamScoreEntry.endTeamScoreEntry(builder);
    }
}
//# sourceMappingURL=team-score-entry.js.map