// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'https://cdn.jsdelivr.net/npm/flatbuffers@23.5.26/+esm';
import { PickupType } from '../game-protocol/pickup-type.js';
import { WeaponType } from '../game-protocol/weapon-type.js';
export class Pickup {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsPickup(bb, obj) {
        return (obj || new Pickup()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsPickup(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Pickup()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    id(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    x() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    y() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    pickupType() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : PickupType.Health;
    }
    weaponType() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : WeaponType.Pistol;
    }
    isActive() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    static startPickup(builder) {
        builder.startObject(6);
    }
    static addId(builder, idOffset) {
        builder.addFieldOffset(0, idOffset, 0);
    }
    static addX(builder, x) {
        builder.addFieldFloat32(1, x, 0.0);
    }
    static addY(builder, y) {
        builder.addFieldFloat32(2, y, 0.0);
    }
    static addPickupType(builder, pickupType) {
        builder.addFieldInt8(3, pickupType, PickupType.Health);
    }
    static addWeaponType(builder, weaponType) {
        builder.addFieldInt8(4, weaponType, WeaponType.Pistol);
    }
    static addIsActive(builder, isActive) {
        builder.addFieldInt8(5, +isActive, +false);
    }
    static endPickup(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createPickup(builder, idOffset, x, y, pickupType, weaponType, isActive) {
        Pickup.startPickup(builder);
        Pickup.addId(builder, idOffset);
        Pickup.addX(builder, x);
        Pickup.addY(builder, y);
        Pickup.addPickupType(builder, pickupType);
        Pickup.addWeaponType(builder, weaponType);
        Pickup.addIsActive(builder, isActive);
        return Pickup.endPickup(builder);
    }
}
//# sourceMappingURL=pickup.js.map
