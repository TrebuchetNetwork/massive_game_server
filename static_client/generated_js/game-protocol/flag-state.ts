// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { FlagStatus } from '../game-protocol/flag-status.js';
import { Vec2 } from '../game-protocol/vec2.js';


export class FlagState {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FlagState {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFlagState(bb:flatbuffers.ByteBuffer, obj?:FlagState):FlagState {
  return (obj || new FlagState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFlagState(bb:flatbuffers.ByteBuffer, obj?:FlagState):FlagState {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FlagState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

teamId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

status():FlagStatus {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : FlagStatus.AtBase;
}

position(obj?:Vec2):Vec2|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Vec2()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

carrierId():string|null
carrierId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
carrierId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

respawnTimer():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startFlagState(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addTeamId(builder:flatbuffers.Builder, teamId:number) {
  builder.addFieldInt8(0, teamId, 0);
}

static addStatus(builder:flatbuffers.Builder, status:FlagStatus) {
  builder.addFieldInt8(1, status, FlagStatus.AtBase);
}

static addPosition(builder:flatbuffers.Builder, positionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, positionOffset, 0);
}

static addCarrierId(builder:flatbuffers.Builder, carrierIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, carrierIdOffset, 0);
}

static addRespawnTimer(builder:flatbuffers.Builder, respawnTimer:number) {
  builder.addFieldFloat32(4, respawnTimer, 0.0);
}

static endFlagState(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
