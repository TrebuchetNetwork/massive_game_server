// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
export class Wall {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsWall(bb, obj) {
        return (obj || new Wall()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsWall(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Wall()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    id(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    x() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    y() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    width() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    height() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    isDestructible() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    currentHealth() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 100;
    }
    maxHealth() {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 100;
    }
    static startWall(builder) {
        builder.startObject(8);
    }
    static addId(builder, idOffset) {
        builder.addFieldOffset(0, idOffset, 0);
    }
    static addX(builder, x) {
        builder.addFieldFloat32(1, x, 0.0);
    }
    static addY(builder, y) {
        builder.addFieldFloat32(2, y, 0.0);
    }
    static addWidth(builder, width) {
        builder.addFieldFloat32(3, width, 0.0);
    }
    static addHeight(builder, height) {
        builder.addFieldFloat32(4, height, 0.0);
    }
    static addIsDestructible(builder, isDestructible) {
        builder.addFieldInt8(5, +isDestructible, +false);
    }
    static addCurrentHealth(builder, currentHealth) {
        builder.addFieldInt32(6, currentHealth, 100);
    }
    static addMaxHealth(builder, maxHealth) {
        builder.addFieldInt32(7, maxHealth, 100);
    }
    static endWall(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createWall(builder, idOffset, x, y, width, height, isDestructible, currentHealth, maxHealth) {
        Wall.startWall(builder);
        Wall.addId(builder, idOffset);
        Wall.addX(builder, x);
        Wall.addY(builder, y);
        Wall.addWidth(builder, width);
        Wall.addHeight(builder, height);
        Wall.addIsDestructible(builder, isDestructible);
        Wall.addCurrentHealth(builder, currentHealth);
        Wall.addMaxHealth(builder, maxHealth);
        return Wall.endWall(builder);
    }
}
//# sourceMappingURL=wall.js.map