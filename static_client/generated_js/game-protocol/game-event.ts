// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { GameEventType } from '../game-protocol/game-event-type.js';
import { Vec2 } from '../game-protocol/vec2.js';
import { WeaponType } from '../game-protocol/weapon-type.js';


export class GameEvent {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GameEvent {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGameEvent(bb:flatbuffers.ByteBuffer, obj?:GameEvent):GameEvent {
  return (obj || new GameEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGameEvent(bb:flatbuffers.ByteBuffer, obj?:GameEvent):GameEvent {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GameEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

eventType():GameEventType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : GameEventType.BulletImpact;
}

position(obj?:Vec2):Vec2|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Vec2()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

instigatorId():string|null
instigatorId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
instigatorId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

targetId():string|null
targetId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
targetId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

weaponType():WeaponType {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : WeaponType.Pistol;
}

value():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startGameEvent(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addEventType(builder:flatbuffers.Builder, eventType:GameEventType) {
  builder.addFieldInt8(0, eventType, GameEventType.BulletImpact);
}

static addPosition(builder:flatbuffers.Builder, positionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, positionOffset, 0);
}

static addInstigatorId(builder:flatbuffers.Builder, instigatorIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, instigatorIdOffset, 0);
}

static addTargetId(builder:flatbuffers.Builder, targetIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, targetIdOffset, 0);
}

static addWeaponType(builder:flatbuffers.Builder, weaponType:WeaponType) {
  builder.addFieldInt8(4, weaponType, WeaponType.Pistol);
}

static addValue(builder:flatbuffers.Builder, value:number) {
  builder.addFieldFloat32(5, value, 0.0);
}

static endGameEvent(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
