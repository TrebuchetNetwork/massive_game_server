// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { FlagState } from '../game-protocol/flag-state.js';
import { GameEvent } from '../game-protocol/game-event.js';
import { KillFeedEntry } from '../game-protocol/kill-feed-entry.js';
import { MatchInfo } from '../game-protocol/match-info.js';
import { Pickup } from '../game-protocol/pickup.js';
import { PlayerState } from '../game-protocol/player-state.js';
import { ProjectileState } from '../game-protocol/projectile-state.js';
import { Wall } from '../game-protocol/wall.js';


export class DeltaStateMessage {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DeltaStateMessage {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDeltaStateMessage(bb:flatbuffers.ByteBuffer, obj?:DeltaStateMessage):DeltaStateMessage {
  return (obj || new DeltaStateMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDeltaStateMessage(bb:flatbuffers.ByteBuffer, obj?:DeltaStateMessage):DeltaStateMessage {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DeltaStateMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

players(index: number, obj?:PlayerState):PlayerState|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new PlayerState()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

playersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

projectiles(index: number, obj?:ProjectileState):ProjectileState|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new ProjectileState()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

projectilesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

pickups(index: number, obj?:Pickup):Pickup|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Pickup()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

pickupsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

removedProjectiles(index: number):string
removedProjectiles(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
removedProjectiles(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

removedProjectilesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

destroyedWallIds(index: number):string
destroyedWallIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
destroyedWallIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

destroyedWallIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

deactivatedPickupIds(index: number):string
deactivatedPickupIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
deactivatedPickupIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

deactivatedPickupIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

killFeed(index: number, obj?:KillFeedEntry):KillFeedEntry|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new KillFeedEntry()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

killFeedLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

matchInfo(obj?:MatchInfo):MatchInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new MatchInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

flagStates(index: number, obj?:FlagState):FlagState|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? (obj || new FlagState()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

flagStatesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

gameEvents(index: number, obj?:GameEvent):GameEvent|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? (obj || new GameEvent()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

gameEventsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

timestamp():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

lastProcessedInputSequence():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

changedPlayerFields(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

changedPlayerFieldsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

changedPlayerFieldsArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

removedPlayerIds(index: number):string
removedPlayerIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
removedPlayerIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

removedPlayerIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

updatedWalls(index: number, obj?:Wall):Wall|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? (obj || new Wall()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

updatedWallsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startDeltaStateMessage(builder:flatbuffers.Builder) {
  builder.startObject(15);
}

static addPlayers(builder:flatbuffers.Builder, playersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, playersOffset, 0);
}

static createPlayersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPlayersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addProjectiles(builder:flatbuffers.Builder, projectilesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, projectilesOffset, 0);
}

static createProjectilesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startProjectilesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPickups(builder:flatbuffers.Builder, pickupsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, pickupsOffset, 0);
}

static createPickupsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPickupsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRemovedProjectiles(builder:flatbuffers.Builder, removedProjectilesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, removedProjectilesOffset, 0);
}

static createRemovedProjectilesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRemovedProjectilesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDestroyedWallIds(builder:flatbuffers.Builder, destroyedWallIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, destroyedWallIdsOffset, 0);
}

static createDestroyedWallIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDestroyedWallIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDeactivatedPickupIds(builder:flatbuffers.Builder, deactivatedPickupIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, deactivatedPickupIdsOffset, 0);
}

static createDeactivatedPickupIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDeactivatedPickupIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addKillFeed(builder:flatbuffers.Builder, killFeedOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, killFeedOffset, 0);
}

static createKillFeedVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startKillFeedVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMatchInfo(builder:flatbuffers.Builder, matchInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, matchInfoOffset, 0);
}

static addFlagStates(builder:flatbuffers.Builder, flagStatesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, flagStatesOffset, 0);
}

static createFlagStatesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFlagStatesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addGameEvents(builder:flatbuffers.Builder, gameEventsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, gameEventsOffset, 0);
}

static createGameEventsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startGameEventsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTimestamp(builder:flatbuffers.Builder, timestamp:bigint) {
  builder.addFieldInt64(10, timestamp, BigInt('0'));
}

static addLastProcessedInputSequence(builder:flatbuffers.Builder, lastProcessedInputSequence:number) {
  builder.addFieldInt32(11, lastProcessedInputSequence, 0);
}

static addChangedPlayerFields(builder:flatbuffers.Builder, changedPlayerFieldsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, changedPlayerFieldsOffset, 0);
}

static createChangedPlayerFieldsVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startChangedPlayerFieldsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addRemovedPlayerIds(builder:flatbuffers.Builder, removedPlayerIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, removedPlayerIdsOffset, 0);
}

static createRemovedPlayerIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRemovedPlayerIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addUpdatedWalls(builder:flatbuffers.Builder, updatedWallsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, updatedWallsOffset, 0);
}

static createUpdatedWallsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startUpdatedWallsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endDeltaStateMessage(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
