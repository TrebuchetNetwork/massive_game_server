// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'https://cdn.jsdelivr.net/npm/flatbuffers@23.5.26/+esm';
import { WeaponType } from '../game-protocol/weapon-type.js';
export class PlayerState {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsPlayerState(bb, obj) {
        return (obj || new PlayerState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsPlayerState(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new PlayerState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    id(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    username(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    x() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    y() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    rotation() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    velocityX() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    velocityY() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    health() {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    maxHealth() {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    alive() {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    respawnTimer() {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    weapon() {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : WeaponType.Pistol;
    }
    ammo() {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    reloadProgress() {
        const offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    score() {
        const offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    kills() {
        const offset = this.bb.__offset(this.bb_pos, 34);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    deaths() {
        const offset = this.bb.__offset(this.bb_pos, 36);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    teamId() {
        const offset = this.bb.__offset(this.bb_pos, 38);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
    }
    speedBoostRemaining() {
        const offset = this.bb.__offset(this.bb_pos, 40);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    damageBoostRemaining() {
        const offset = this.bb.__offset(this.bb_pos, 42);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    shieldCurrent() {
        const offset = this.bb.__offset(this.bb_pos, 44);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    shieldMax() {
        const offset = this.bb.__offset(this.bb_pos, 46);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    isCarryingFlagTeamId() {
        const offset = this.bb.__offset(this.bb_pos, 48);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
    }
    static startPlayerState(builder) {
        builder.startObject(23);
    }
    static addId(builder, idOffset) {
        builder.addFieldOffset(0, idOffset, 0);
    }
    static addUsername(builder, usernameOffset) {
        builder.addFieldOffset(1, usernameOffset, 0);
    }
    static addX(builder, x) {
        builder.addFieldFloat32(2, x, 0.0);
    }
    static addY(builder, y) {
        builder.addFieldFloat32(3, y, 0.0);
    }
    static addRotation(builder, rotation) {
        builder.addFieldFloat32(4, rotation, 0.0);
    }
    static addVelocityX(builder, velocityX) {
        builder.addFieldFloat32(5, velocityX, 0.0);
    }
    static addVelocityY(builder, velocityY) {
        builder.addFieldFloat32(6, velocityY, 0.0);
    }
    static addHealth(builder, health) {
        builder.addFieldInt32(7, health, 0);
    }
    static addMaxHealth(builder, maxHealth) {
        builder.addFieldInt32(8, maxHealth, 0);
    }
    static addAlive(builder, alive) {
        builder.addFieldInt8(9, +alive, +false);
    }
    static addRespawnTimer(builder, respawnTimer) {
        builder.addFieldFloat32(10, respawnTimer, 0.0);
    }
    static addWeapon(builder, weapon) {
        builder.addFieldInt8(11, weapon, WeaponType.Pistol);
    }
    static addAmmo(builder, ammo) {
        builder.addFieldInt32(12, ammo, 0);
    }
    static addReloadProgress(builder, reloadProgress) {
        builder.addFieldFloat32(13, reloadProgress, 0.0);
    }
    static addScore(builder, score) {
        builder.addFieldInt32(14, score, 0);
    }
    static addKills(builder, kills) {
        builder.addFieldInt32(15, kills, 0);
    }
    static addDeaths(builder, deaths) {
        builder.addFieldInt32(16, deaths, 0);
    }
    static addTeamId(builder, teamId) {
        builder.addFieldInt8(17, teamId, 0);
    }
    static addSpeedBoostRemaining(builder, speedBoostRemaining) {
        builder.addFieldFloat32(18, speedBoostRemaining, 0.0);
    }
    static addDamageBoostRemaining(builder, damageBoostRemaining) {
        builder.addFieldFloat32(19, damageBoostRemaining, 0.0);
    }
    static addShieldCurrent(builder, shieldCurrent) {
        builder.addFieldInt32(20, shieldCurrent, 0);
    }
    static addShieldMax(builder, shieldMax) {
        builder.addFieldInt32(21, shieldMax, 0);
    }
    static addIsCarryingFlagTeamId(builder, isCarryingFlagTeamId) {
        builder.addFieldInt8(22, isCarryingFlagTeamId, 0);
    }
    static endPlayerState(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createPlayerState(builder, idOffset, usernameOffset, x, y, rotation, velocityX, velocityY, health, maxHealth, alive, respawnTimer, weapon, ammo, reloadProgress, score, kills, deaths, teamId, speedBoostRemaining, damageBoostRemaining, shieldCurrent, shieldMax, isCarryingFlagTeamId) {
        PlayerState.startPlayerState(builder);
        PlayerState.addId(builder, idOffset);
        PlayerState.addUsername(builder, usernameOffset);
        PlayerState.addX(builder, x);
        PlayerState.addY(builder, y);
        PlayerState.addRotation(builder, rotation);
        PlayerState.addVelocityX(builder, velocityX);
        PlayerState.addVelocityY(builder, velocityY);
        PlayerState.addHealth(builder, health);
        PlayerState.addMaxHealth(builder, maxHealth);
        PlayerState.addAlive(builder, alive);
        PlayerState.addRespawnTimer(builder, respawnTimer);
        PlayerState.addWeapon(builder, weapon);
        PlayerState.addAmmo(builder, ammo);
        PlayerState.addReloadProgress(builder, reloadProgress);
        PlayerState.addScore(builder, score);
        PlayerState.addKills(builder, kills);
        PlayerState.addDeaths(builder, deaths);
        PlayerState.addTeamId(builder, teamId);
        PlayerState.addSpeedBoostRemaining(builder, speedBoostRemaining);
        PlayerState.addDamageBoostRemaining(builder, damageBoostRemaining);
        PlayerState.addShieldCurrent(builder, shieldCurrent);
        PlayerState.addShieldMax(builder, shieldMax);
        PlayerState.addIsCarryingFlagTeamId(builder, isCarryingFlagTeamId);
        return PlayerState.endPlayerState(builder);
    }
}
//# sourceMappingURL=player-state.js.map
