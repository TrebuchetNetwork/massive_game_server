// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'https://cdn.jsdelivr.net/npm/flatbuffers@23.5.26/+esm';
import { MatchStateType } from '../game-protocol/match-state-type.js';
import { Team } from '../game-protocol/team.js';
export class MatchStatus {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsMatchStatus(bb, obj) {
        return (obj || new MatchStatus()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsMatchStatus(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new MatchStatus()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    state() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : MatchStateType.Waiting;
    }
    timeRemainingSeconds() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    team1Score() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    team2Score() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    winningTeam() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : Team.Spectator;
    }
    static startMatchStatus(builder) {
        builder.startObject(5);
    }
    static addState(builder, state) {
        builder.addFieldInt8(0, state, MatchStateType.Waiting);
    }
    static addTimeRemainingSeconds(builder, timeRemainingSeconds) {
        builder.addFieldInt32(1, timeRemainingSeconds, 0);
    }
    static addTeam1Score(builder, team1Score) {
        builder.addFieldInt32(2, team1Score, 0);
    }
    static addTeam2Score(builder, team2Score) {
        builder.addFieldInt32(3, team2Score, 0);
    }
    static addWinningTeam(builder, winningTeam) {
        builder.addFieldInt8(4, winningTeam, Team.Spectator);
    }
    static endMatchStatus(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createMatchStatus(builder, state, timeRemainingSeconds, team1Score, team2Score, winningTeam) {
        MatchStatus.startMatchStatus(builder);
        MatchStatus.addState(builder, state);
        MatchStatus.addTimeRemainingSeconds(builder, timeRemainingSeconds);
        MatchStatus.addTeam1Score(builder, team1Score);
        MatchStatus.addTeam2Score(builder, team2Score);
        MatchStatus.addWinningTeam(builder, winningTeam);
        return MatchStatus.endMatchStatus(builder);
    }
}
//# sourceMappingURL=match-status.js.map
