// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class Wall {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Wall {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsWall(bb:flatbuffers.ByteBuffer, obj?:Wall):Wall {
  return (obj || new Wall()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsWall(bb:flatbuffers.ByteBuffer, obj?:Wall):Wall {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Wall()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

x():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

y():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

width():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

height():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

isDestructible():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

currentHealth():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 100;
}

maxHealth():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 100;
}

static startWall(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addX(builder:flatbuffers.Builder, x:number) {
  builder.addFieldFloat32(1, x, 0.0);
}

static addY(builder:flatbuffers.Builder, y:number) {
  builder.addFieldFloat32(2, y, 0.0);
}

static addWidth(builder:flatbuffers.Builder, width:number) {
  builder.addFieldFloat32(3, width, 0.0);
}

static addHeight(builder:flatbuffers.Builder, height:number) {
  builder.addFieldFloat32(4, height, 0.0);
}

static addIsDestructible(builder:flatbuffers.Builder, isDestructible:boolean) {
  builder.addFieldInt8(5, +isDestructible, +false);
}

static addCurrentHealth(builder:flatbuffers.Builder, currentHealth:number) {
  builder.addFieldInt32(6, currentHealth, 100);
}

static addMaxHealth(builder:flatbuffers.Builder, maxHealth:number) {
  builder.addFieldInt32(7, maxHealth, 100);
}

static endWall(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createWall(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, x:number, y:number, width:number, height:number, isDestructible:boolean, currentHealth:number, maxHealth:number):flatbuffers.Offset {
  Wall.startWall(builder);
  Wall.addId(builder, idOffset);
  Wall.addX(builder, x);
  Wall.addY(builder, y);
  Wall.addWidth(builder, width);
  Wall.addHeight(builder, height);
  Wall.addIsDestructible(builder, isDestructible);
  Wall.addCurrentHealth(builder, currentHealth);
  Wall.addMaxHealth(builder, maxHealth);
  return Wall.endWall(builder);
}
}
