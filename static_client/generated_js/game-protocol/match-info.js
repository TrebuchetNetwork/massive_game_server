// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'https://cdn.jsdelivr.net/npm/flatbuffers@23.5.26/+esm';
import { GameModeType } from '../game-protocol/game-mode-type.js';
import { MatchStateType } from '../game-protocol/match-state-type.js';
import { TeamScoreEntry } from '../game-protocol/team-score-entry.js';
export class MatchInfo {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsMatchInfo(bb, obj) {
        return (obj || new MatchInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsMatchInfo(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new MatchInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    timeRemaining() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    matchState() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : MatchStateType.Waiting;
    }
    winnerId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    winnerName(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    gameMode() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : GameModeType.FreeForAll;
    }
    teamScores(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? (obj || new TeamScoreEntry()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    teamScoresLength() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startMatchInfo(builder) {
        builder.startObject(6);
    }
    static addTimeRemaining(builder, timeRemaining) {
        builder.addFieldFloat32(0, timeRemaining, 0.0);
    }
    static addMatchState(builder, matchState) {
        builder.addFieldInt8(1, matchState, MatchStateType.Waiting);
    }
    static addWinnerId(builder, winnerIdOffset) {
        builder.addFieldOffset(2, winnerIdOffset, 0);
    }
    static addWinnerName(builder, winnerNameOffset) {
        builder.addFieldOffset(3, winnerNameOffset, 0);
    }
    static addGameMode(builder, gameMode) {
        builder.addFieldInt8(4, gameMode, GameModeType.FreeForAll);
    }
    static addTeamScores(builder, teamScoresOffset) {
        builder.addFieldOffset(5, teamScoresOffset, 0);
    }
    static createTeamScoresVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startTeamScoresVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endMatchInfo(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createMatchInfo(builder, timeRemaining, matchState, winnerIdOffset, winnerNameOffset, gameMode, teamScoresOffset) {
        MatchInfo.startMatchInfo(builder);
        MatchInfo.addTimeRemaining(builder, timeRemaining);
        MatchInfo.addMatchState(builder, matchState);
        MatchInfo.addWinnerId(builder, winnerIdOffset);
        MatchInfo.addWinnerName(builder, winnerNameOffset);
        MatchInfo.addGameMode(builder, gameMode);
        MatchInfo.addTeamScores(builder, teamScoresOffset);
        return MatchInfo.endMatchInfo(builder);
    }
}
//# sourceMappingURL=match-info.js.map
