// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { FlagStatus } from '../game-protocol/flag-status.js';
import { Vec2 } from '../game-protocol/vec2.js';
export class FlagState {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsFlagState(bb, obj) {
        return (obj || new FlagState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsFlagState(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new FlagState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    teamId() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
    }
    status() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : FlagStatus.AtBase;
    }
    position(obj) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? (obj || new Vec2()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    carrierId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    respawnTimer() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    static startFlagState(builder) {
        builder.startObject(5);
    }
    static addTeamId(builder, teamId) {
        builder.addFieldInt8(0, teamId, 0);
    }
    static addStatus(builder, status) {
        builder.addFieldInt8(1, status, FlagStatus.AtBase);
    }
    static addPosition(builder, positionOffset) {
        builder.addFieldOffset(2, positionOffset, 0);
    }
    static addCarrierId(builder, carrierIdOffset) {
        builder.addFieldOffset(3, carrierIdOffset, 0);
    }
    static addRespawnTimer(builder, respawnTimer) {
        builder.addFieldFloat32(4, respawnTimer, 0.0);
    }
    static endFlagState(builder) {
        const offset = builder.endObject();
        return offset;
    }
}
//# sourceMappingURL=flag-state.js.map