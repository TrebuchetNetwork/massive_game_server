// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'https://cdn.jsdelivr.net/npm/flatbuffers@23.5.26/+esm';
import { Vec2 } from '../game-protocol/vec2.js';
import { WeaponType } from '../game-protocol/weapon-type.js';
export class KillFeedEntry {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsKillFeedEntry(bb, obj) {
        return (obj || new KillFeedEntry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsKillFeedEntry(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new KillFeedEntry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    killerName(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    victimName(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    weapon() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : WeaponType.Pistol;
    }
    timestamp() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    killerPosition(obj) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? (obj || new Vec2()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    victimPosition(obj) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? (obj || new Vec2()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    isHeadshot() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    static startKillFeedEntry(builder) {
        builder.startObject(7);
    }
    static addKillerName(builder, killerNameOffset) {
        builder.addFieldOffset(0, killerNameOffset, 0);
    }
    static addVictimName(builder, victimNameOffset) {
        builder.addFieldOffset(1, victimNameOffset, 0);
    }
    static addWeapon(builder, weapon) {
        builder.addFieldInt8(2, weapon, WeaponType.Pistol);
    }
    static addTimestamp(builder, timestamp) {
        builder.addFieldFloat32(3, timestamp, 0.0);
    }
    static addKillerPosition(builder, killerPositionOffset) {
        builder.addFieldOffset(4, killerPositionOffset, 0);
    }
    static addVictimPosition(builder, victimPositionOffset) {
        builder.addFieldOffset(5, victimPositionOffset, 0);
    }
    static addIsHeadshot(builder, isHeadshot) {
        builder.addFieldInt8(6, +isHeadshot, +false);
    }
    static endKillFeedEntry(builder) {
        const offset = builder.endObject();
        return offset;
    }
}
//# sourceMappingURL=kill-feed-entry.js.map
