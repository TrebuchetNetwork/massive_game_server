// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class WelcomeMessage {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):WelcomeMessage {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsWelcomeMessage(bb:flatbuffers.ByteBuffer, obj?:WelcomeMessage):WelcomeMessage {
  return (obj || new WelcomeMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsWelcomeMessage(bb:flatbuffers.ByteBuffer, obj?:WelcomeMessage):WelcomeMessage {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new WelcomeMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

playerId():string|null
playerId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
playerId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

message():string|null
message(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
message(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

serverTickRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 30;
}

static startWelcomeMessage(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addPlayerId(builder:flatbuffers.Builder, playerIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, playerIdOffset, 0);
}

static addMessage(builder:flatbuffers.Builder, messageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, messageOffset, 0);
}

static addServerTickRate(builder:flatbuffers.Builder, serverTickRate:number) {
  builder.addFieldInt16(2, serverTickRate, 30);
}

static endWelcomeMessage(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createWelcomeMessage(builder:flatbuffers.Builder, playerIdOffset:flatbuffers.Offset, messageOffset:flatbuffers.Offset, serverTickRate:number):flatbuffers.Offset {
  WelcomeMessage.startWelcomeMessage(builder);
  WelcomeMessage.addPlayerId(builder, playerIdOffset);
  WelcomeMessage.addMessage(builder, messageOffset);
  WelcomeMessage.addServerTickRate(builder, serverTickRate);
  return WelcomeMessage.endWelcomeMessage(builder);
}
}
