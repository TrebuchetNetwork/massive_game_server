import * as flatbuffers from 'flatbuffers';
import { FlagState } from '../game-protocol/flag-state.js';
import { GameEvent } from '../game-protocol/game-event.js';
import { KillFeedEntry } from '../game-protocol/kill-feed-entry.js';
import { MatchInfo } from '../game-protocol/match-info.js';
import { Pickup } from '../game-protocol/pickup.js';
import { PlayerState } from '../game-protocol/player-state.js';
import { ProjectileState } from '../game-protocol/projectile-state.js';
import { Wall } from '../game-protocol/wall.js';
export declare class DeltaStateMessage {
    bb: flatbuffers.ByteBuffer | null;
    bb_pos: number;
    __init(i: number, bb: flatbuffers.ByteBuffer): DeltaStateMessage;
    static getRootAsDeltaStateMessage(bb: flatbuffers.ByteBuffer, obj?: DeltaStateMessage): DeltaStateMessage;
    static getSizePrefixedRootAsDeltaStateMessage(bb: flatbuffers.ByteBuffer, obj?: DeltaStateMessage): DeltaStateMessage;
    players(index: number, obj?: PlayerState): PlayerState | null;
    playersLength(): number;
    projectiles(index: number, obj?: ProjectileState): ProjectileState | null;
    projectilesLength(): number;
    pickups(index: number, obj?: Pickup): Pickup | null;
    pickupsLength(): number;
    removedProjectiles(index: number): string;
    removedProjectiles(index: number, optionalEncoding: flatbuffers.Encoding): string | Uint8Array;
    removedProjectilesLength(): number;
    destroyedWallIds(index: number): string;
    destroyedWallIds(index: number, optionalEncoding: flatbuffers.Encoding): string | Uint8Array;
    destroyedWallIdsLength(): number;
    deactivatedPickupIds(index: number): string;
    deactivatedPickupIds(index: number, optionalEncoding: flatbuffers.Encoding): string | Uint8Array;
    deactivatedPickupIdsLength(): number;
    killFeed(index: number, obj?: KillFeedEntry): KillFeedEntry | null;
    killFeedLength(): number;
    matchInfo(obj?: MatchInfo): MatchInfo | null;
    flagStates(index: number, obj?: FlagState): FlagState | null;
    flagStatesLength(): number;
    gameEvents(index: number, obj?: GameEvent): GameEvent | null;
    gameEventsLength(): number;
    timestamp(): bigint;
    lastProcessedInputSequence(): number;
    changedPlayerFields(index: number): number | null;
    changedPlayerFieldsLength(): number;
    changedPlayerFieldsArray(): Uint8Array | null;
    removedPlayerIds(index: number): string;
    removedPlayerIds(index: number, optionalEncoding: flatbuffers.Encoding): string | Uint8Array;
    removedPlayerIdsLength(): number;
    updatedWalls(index: number, obj?: Wall): Wall | null;
    updatedWallsLength(): number;
    static startDeltaStateMessage(builder: flatbuffers.Builder): void;
    static addPlayers(builder: flatbuffers.Builder, playersOffset: flatbuffers.Offset): void;
    static createPlayersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset;
    static startPlayersVector(builder: flatbuffers.Builder, numElems: number): void;
    static addProjectiles(builder: flatbuffers.Builder, projectilesOffset: flatbuffers.Offset): void;
    static createProjectilesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset;
    static startProjectilesVector(builder: flatbuffers.Builder, numElems: number): void;
    static addPickups(builder: flatbuffers.Builder, pickupsOffset: flatbuffers.Offset): void;
    static createPickupsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset;
    static startPickupsVector(builder: flatbuffers.Builder, numElems: number): void;
    static addRemovedProjectiles(builder: flatbuffers.Builder, removedProjectilesOffset: flatbuffers.Offset): void;
    static createRemovedProjectilesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset;
    static startRemovedProjectilesVector(builder: flatbuffers.Builder, numElems: number): void;
    static addDestroyedWallIds(builder: flatbuffers.Builder, destroyedWallIdsOffset: flatbuffers.Offset): void;
    static createDestroyedWallIdsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset;
    static startDestroyedWallIdsVector(builder: flatbuffers.Builder, numElems: number): void;
    static addDeactivatedPickupIds(builder: flatbuffers.Builder, deactivatedPickupIdsOffset: flatbuffers.Offset): void;
    static createDeactivatedPickupIdsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset;
    static startDeactivatedPickupIdsVector(builder: flatbuffers.Builder, numElems: number): void;
    static addKillFeed(builder: flatbuffers.Builder, killFeedOffset: flatbuffers.Offset): void;
    static createKillFeedVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset;
    static startKillFeedVector(builder: flatbuffers.Builder, numElems: number): void;
    static addMatchInfo(builder: flatbuffers.Builder, matchInfoOffset: flatbuffers.Offset): void;
    static addFlagStates(builder: flatbuffers.Builder, flagStatesOffset: flatbuffers.Offset): void;
    static createFlagStatesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset;
    static startFlagStatesVector(builder: flatbuffers.Builder, numElems: number): void;
    static addGameEvents(builder: flatbuffers.Builder, gameEventsOffset: flatbuffers.Offset): void;
    static createGameEventsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset;
    static startGameEventsVector(builder: flatbuffers.Builder, numElems: number): void;
    static addTimestamp(builder: flatbuffers.Builder, timestamp: bigint): void;
    static addLastProcessedInputSequence(builder: flatbuffers.Builder, lastProcessedInputSequence: number): void;
    static addChangedPlayerFields(builder: flatbuffers.Builder, changedPlayerFieldsOffset: flatbuffers.Offset): void;
    static createChangedPlayerFieldsVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset;
    static startChangedPlayerFieldsVector(builder: flatbuffers.Builder, numElems: number): void;
    static addRemovedPlayerIds(builder: flatbuffers.Builder, removedPlayerIdsOffset: flatbuffers.Offset): void;
    static createRemovedPlayerIdsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset;
    static startRemovedPlayerIdsVector(builder: flatbuffers.Builder, numElems: number): void;
    static addUpdatedWalls(builder: flatbuffers.Builder, updatedWallsOffset: flatbuffers.Offset): void;
    static createUpdatedWallsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset;
    static startUpdatedWallsVector(builder: flatbuffers.Builder, numElems: number): void;
    static endDeltaStateMessage(builder: flatbuffers.Builder): flatbuffers.Offset;
}
//# sourceMappingURL=delta-state-message.d.ts.map