// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { FlagState } from '../game-protocol/flag-state.js';
import { MatchInfo } from '../game-protocol/match-info.js';
import { Pickup } from '../game-protocol/pickup.js';
import { PlayerState } from '../game-protocol/player-state.js';
import { ProjectileState } from '../game-protocol/projectile-state.js';
import { Wall } from '../game-protocol/wall.js';


export class InitialStateMessage {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):InitialStateMessage {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsInitialStateMessage(bb:flatbuffers.ByteBuffer, obj?:InitialStateMessage):InitialStateMessage {
  return (obj || new InitialStateMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsInitialStateMessage(bb:flatbuffers.ByteBuffer, obj?:InitialStateMessage):InitialStateMessage {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new InitialStateMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

playerId():string|null
playerId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
playerId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

walls(index: number, obj?:Wall):Wall|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Wall()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

wallsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

players(index: number, obj?:PlayerState):PlayerState|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new PlayerState()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

playersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

projectiles(index: number, obj?:ProjectileState):ProjectileState|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new ProjectileState()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

projectilesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

pickups(index: number, obj?:Pickup):Pickup|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new Pickup()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

pickupsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

matchInfo(obj?:MatchInfo):MatchInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new MatchInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

flagStates(index: number, obj?:FlagState):FlagState|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new FlagState()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

flagStatesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

timestamp():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

mapName():string|null
mapName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mapName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startInitialStateMessage(builder:flatbuffers.Builder) {
  builder.startObject(9);
}

static addPlayerId(builder:flatbuffers.Builder, playerIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, playerIdOffset, 0);
}

static addWalls(builder:flatbuffers.Builder, wallsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, wallsOffset, 0);
}

static createWallsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startWallsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPlayers(builder:flatbuffers.Builder, playersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, playersOffset, 0);
}

static createPlayersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPlayersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addProjectiles(builder:flatbuffers.Builder, projectilesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, projectilesOffset, 0);
}

static createProjectilesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startProjectilesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPickups(builder:flatbuffers.Builder, pickupsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, pickupsOffset, 0);
}

static createPickupsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPickupsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMatchInfo(builder:flatbuffers.Builder, matchInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, matchInfoOffset, 0);
}

static addFlagStates(builder:flatbuffers.Builder, flagStatesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, flagStatesOffset, 0);
}

static createFlagStatesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFlagStatesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTimestamp(builder:flatbuffers.Builder, timestamp:bigint) {
  builder.addFieldInt64(7, timestamp, BigInt('0'));
}

static addMapName(builder:flatbuffers.Builder, mapNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, mapNameOffset, 0);
}

static endInitialStateMessage(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
