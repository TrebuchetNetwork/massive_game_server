// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { WeaponType } from '../game-protocol/weapon-type.js';


export class PlayerState {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PlayerState {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPlayerState(bb:flatbuffers.ByteBuffer, obj?:PlayerState):PlayerState {
  return (obj || new PlayerState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPlayerState(bb:flatbuffers.ByteBuffer, obj?:PlayerState):PlayerState {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PlayerState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

username():string|null
username(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
username(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

x():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

y():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

rotation():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

velocityX():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

velocityY():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

health():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

maxHealth():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

alive():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

respawnTimer():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

weapon():WeaponType {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : WeaponType.Pistol;
}

ammo():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

reloadProgress():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

score():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

kills():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

deaths():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

teamId():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

speedBoostRemaining():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

damageBoostRemaining():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

shieldCurrent():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

shieldMax():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

isCarryingFlagTeamId():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

static startPlayerState(builder:flatbuffers.Builder) {
  builder.startObject(23);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addUsername(builder:flatbuffers.Builder, usernameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, usernameOffset, 0);
}

static addX(builder:flatbuffers.Builder, x:number) {
  builder.addFieldFloat32(2, x, 0.0);
}

static addY(builder:flatbuffers.Builder, y:number) {
  builder.addFieldFloat32(3, y, 0.0);
}

static addRotation(builder:flatbuffers.Builder, rotation:number) {
  builder.addFieldFloat32(4, rotation, 0.0);
}

static addVelocityX(builder:flatbuffers.Builder, velocityX:number) {
  builder.addFieldFloat32(5, velocityX, 0.0);
}

static addVelocityY(builder:flatbuffers.Builder, velocityY:number) {
  builder.addFieldFloat32(6, velocityY, 0.0);
}

static addHealth(builder:flatbuffers.Builder, health:number) {
  builder.addFieldInt32(7, health, 0);
}

static addMaxHealth(builder:flatbuffers.Builder, maxHealth:number) {
  builder.addFieldInt32(8, maxHealth, 0);
}

static addAlive(builder:flatbuffers.Builder, alive:boolean) {
  builder.addFieldInt8(9, +alive, +false);
}

static addRespawnTimer(builder:flatbuffers.Builder, respawnTimer:number) {
  builder.addFieldFloat32(10, respawnTimer, 0.0);
}

static addWeapon(builder:flatbuffers.Builder, weapon:WeaponType) {
  builder.addFieldInt8(11, weapon, WeaponType.Pistol);
}

static addAmmo(builder:flatbuffers.Builder, ammo:number) {
  builder.addFieldInt32(12, ammo, 0);
}

static addReloadProgress(builder:flatbuffers.Builder, reloadProgress:number) {
  builder.addFieldFloat32(13, reloadProgress, 0.0);
}

static addScore(builder:flatbuffers.Builder, score:number) {
  builder.addFieldInt32(14, score, 0);
}

static addKills(builder:flatbuffers.Builder, kills:number) {
  builder.addFieldInt32(15, kills, 0);
}

static addDeaths(builder:flatbuffers.Builder, deaths:number) {
  builder.addFieldInt32(16, deaths, 0);
}

static addTeamId(builder:flatbuffers.Builder, teamId:number) {
  builder.addFieldInt8(17, teamId, 0);
}

static addSpeedBoostRemaining(builder:flatbuffers.Builder, speedBoostRemaining:number) {
  builder.addFieldFloat32(18, speedBoostRemaining, 0.0);
}

static addDamageBoostRemaining(builder:flatbuffers.Builder, damageBoostRemaining:number) {
  builder.addFieldFloat32(19, damageBoostRemaining, 0.0);
}

static addShieldCurrent(builder:flatbuffers.Builder, shieldCurrent:number) {
  builder.addFieldInt32(20, shieldCurrent, 0);
}

static addShieldMax(builder:flatbuffers.Builder, shieldMax:number) {
  builder.addFieldInt32(21, shieldMax, 0);
}

static addIsCarryingFlagTeamId(builder:flatbuffers.Builder, isCarryingFlagTeamId:number) {
  builder.addFieldInt8(22, isCarryingFlagTeamId, 0);
}

static endPlayerState(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPlayerState(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, usernameOffset:flatbuffers.Offset, x:number, y:number, rotation:number, velocityX:number, velocityY:number, health:number, maxHealth:number, alive:boolean, respawnTimer:number, weapon:WeaponType, ammo:number, reloadProgress:number, score:number, kills:number, deaths:number, teamId:number, speedBoostRemaining:number, damageBoostRemaining:number, shieldCurrent:number, shieldMax:number, isCarryingFlagTeamId:number):flatbuffers.Offset {
  PlayerState.startPlayerState(builder);
  PlayerState.addId(builder, idOffset);
  PlayerState.addUsername(builder, usernameOffset);
  PlayerState.addX(builder, x);
  PlayerState.addY(builder, y);
  PlayerState.addRotation(builder, rotation);
  PlayerState.addVelocityX(builder, velocityX);
  PlayerState.addVelocityY(builder, velocityY);
  PlayerState.addHealth(builder, health);
  PlayerState.addMaxHealth(builder, maxHealth);
  PlayerState.addAlive(builder, alive);
  PlayerState.addRespawnTimer(builder, respawnTimer);
  PlayerState.addWeapon(builder, weapon);
  PlayerState.addAmmo(builder, ammo);
  PlayerState.addReloadProgress(builder, reloadProgress);
  PlayerState.addScore(builder, score);
  PlayerState.addKills(builder, kills);
  PlayerState.addDeaths(builder, deaths);
  PlayerState.addTeamId(builder, teamId);
  PlayerState.addSpeedBoostRemaining(builder, speedBoostRemaining);
  PlayerState.addDamageBoostRemaining(builder, damageBoostRemaining);
  PlayerState.addShieldCurrent(builder, shieldCurrent);
  PlayerState.addShieldMax(builder, shieldMax);
  PlayerState.addIsCarryingFlagTeamId(builder, isCarryingFlagTeamId);
  return PlayerState.endPlayerState(builder);
}
}
