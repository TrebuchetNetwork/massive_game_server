// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { WeaponType } from '../game-protocol/weapon-type.js';


export class ProjectileState {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ProjectileState {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsProjectileState(bb:flatbuffers.ByteBuffer, obj?:ProjectileState):ProjectileState {
  return (obj || new ProjectileState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsProjectileState(bb:flatbuffers.ByteBuffer, obj?:ProjectileState):ProjectileState {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ProjectileState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

x():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

y():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

ownerId():string|null
ownerId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ownerId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

weaponType():WeaponType {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : WeaponType.Pistol;
}

velocityX():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

velocityY():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startProjectileState(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addX(builder:flatbuffers.Builder, x:number) {
  builder.addFieldFloat32(1, x, 0.0);
}

static addY(builder:flatbuffers.Builder, y:number) {
  builder.addFieldFloat32(2, y, 0.0);
}

static addOwnerId(builder:flatbuffers.Builder, ownerIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, ownerIdOffset, 0);
}

static addWeaponType(builder:flatbuffers.Builder, weaponType:WeaponType) {
  builder.addFieldInt8(4, weaponType, WeaponType.Pistol);
}

static addVelocityX(builder:flatbuffers.Builder, velocityX:number) {
  builder.addFieldFloat32(5, velocityX, 0.0);
}

static addVelocityY(builder:flatbuffers.Builder, velocityY:number) {
  builder.addFieldFloat32(6, velocityY, 0.0);
}

static endProjectileState(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createProjectileState(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, x:number, y:number, ownerIdOffset:flatbuffers.Offset, weaponType:WeaponType, velocityX:number, velocityY:number):flatbuffers.Offset {
  ProjectileState.startProjectileState(builder);
  ProjectileState.addId(builder, idOffset);
  ProjectileState.addX(builder, x);
  ProjectileState.addY(builder, y);
  ProjectileState.addOwnerId(builder, ownerIdOffset);
  ProjectileState.addWeaponType(builder, weaponType);
  ProjectileState.addVelocityX(builder, velocityX);
  ProjectileState.addVelocityY(builder, velocityY);
  return ProjectileState.endProjectileState(builder);
}
}
