// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { MatchStateType } from '../game-protocol/match-state-type.js';
import { Team } from '../game-protocol/team.js';


export class MatchStatus {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MatchStatus {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMatchStatus(bb:flatbuffers.ByteBuffer, obj?:MatchStatus):MatchStatus {
  return (obj || new MatchStatus()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMatchStatus(bb:flatbuffers.ByteBuffer, obj?:MatchStatus):MatchStatus {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MatchStatus()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

state():MatchStateType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : MatchStateType.Waiting;
}

timeRemainingSeconds():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

team1Score():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

team2Score():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

winningTeam():Team {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Team.Spectator;
}

static startMatchStatus(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addState(builder:flatbuffers.Builder, state:MatchStateType) {
  builder.addFieldInt8(0, state, MatchStateType.Waiting);
}

static addTimeRemainingSeconds(builder:flatbuffers.Builder, timeRemainingSeconds:number) {
  builder.addFieldInt32(1, timeRemainingSeconds, 0);
}

static addTeam1Score(builder:flatbuffers.Builder, team1Score:number) {
  builder.addFieldInt32(2, team1Score, 0);
}

static addTeam2Score(builder:flatbuffers.Builder, team2Score:number) {
  builder.addFieldInt32(3, team2Score, 0);
}

static addWinningTeam(builder:flatbuffers.Builder, winningTeam:Team) {
  builder.addFieldInt8(4, winningTeam, Team.Spectator);
}

static endMatchStatus(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createMatchStatus(builder:flatbuffers.Builder, state:MatchStateType, timeRemainingSeconds:number, team1Score:number, team2Score:number, winningTeam:Team):flatbuffers.Offset {
  MatchStatus.startMatchStatus(builder);
  MatchStatus.addState(builder, state);
  MatchStatus.addTimeRemainingSeconds(builder, timeRemainingSeconds);
  MatchStatus.addTeam1Score(builder, team1Score);
  MatchStatus.addTeam2Score(builder, team2Score);
  MatchStatus.addWinningTeam(builder, winningTeam);
  return MatchStatus.endMatchStatus(builder);
}
}
