// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Vec2 } from '../game-protocol/vec2.js';
import { WeaponType } from '../game-protocol/weapon-type.js';


export class KillFeedEntry {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):KillFeedEntry {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsKillFeedEntry(bb:flatbuffers.ByteBuffer, obj?:KillFeedEntry):KillFeedEntry {
  return (obj || new KillFeedEntry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsKillFeedEntry(bb:flatbuffers.ByteBuffer, obj?:KillFeedEntry):KillFeedEntry {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new KillFeedEntry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

killerName():string|null
killerName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
killerName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

victimName():string|null
victimName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
victimName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

weapon():WeaponType {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : WeaponType.Pistol;
}

timestamp():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

killerPosition(obj?:Vec2):Vec2|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new Vec2()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

victimPosition(obj?:Vec2):Vec2|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new Vec2()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

isHeadshot():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startKillFeedEntry(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addKillerName(builder:flatbuffers.Builder, killerNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, killerNameOffset, 0);
}

static addVictimName(builder:flatbuffers.Builder, victimNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, victimNameOffset, 0);
}

static addWeapon(builder:flatbuffers.Builder, weapon:WeaponType) {
  builder.addFieldInt8(2, weapon, WeaponType.Pistol);
}

static addTimestamp(builder:flatbuffers.Builder, timestamp:number) {
  builder.addFieldFloat32(3, timestamp, 0.0);
}

static addKillerPosition(builder:flatbuffers.Builder, killerPositionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, killerPositionOffset, 0);
}

static addVictimPosition(builder:flatbuffers.Builder, victimPositionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, victimPositionOffset, 0);
}

static addIsHeadshot(builder:flatbuffers.Builder, isHeadshot:boolean) {
  builder.addFieldInt8(6, +isHeadshot, +false);
}

static endKillFeedEntry(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
