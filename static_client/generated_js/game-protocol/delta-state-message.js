// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { FlagState } from '../game-protocol/flag-state.js';
import { GameEvent } from '../game-protocol/game-event.js';
import { KillFeedEntry } from '../game-protocol/kill-feed-entry.js';
import { MatchInfo } from '../game-protocol/match-info.js';
import { Pickup } from '../game-protocol/pickup.js';
import { PlayerState } from '../game-protocol/player-state.js';
import { ProjectileState } from '../game-protocol/projectile-state.js';
import { Wall } from '../game-protocol/wall.js';
export class DeltaStateMessage {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsDeltaStateMessage(bb, obj) {
        return (obj || new DeltaStateMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsDeltaStateMessage(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new DeltaStateMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    players(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new PlayerState()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    playersLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    projectiles(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new ProjectileState()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    projectilesLength() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    pickups(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? (obj || new Pickup()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    pickupsLength() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    removedProjectiles(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    removedProjectilesLength() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    destroyedWallIds(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    destroyedWallIdsLength() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    deactivatedPickupIds(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    deactivatedPickupIdsLength() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    killFeed(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? (obj || new KillFeedEntry()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    killFeedLength() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    matchInfo(obj) {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? (obj || new MatchInfo()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    flagStates(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? (obj || new FlagState()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    flagStatesLength() {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    gameEvents(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? (obj || new GameEvent()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    gameEventsLength() {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    timestamp() {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.readUint64(this.bb_pos + offset) : BigInt('0');
    }
    lastProcessedInputSequence() {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    changedPlayerFields(index) {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    changedPlayerFieldsLength() {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    changedPlayerFieldsArray() {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    removedPlayerIds(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    removedPlayerIdsLength() {
        const offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    updatedWalls(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? (obj || new Wall()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    updatedWallsLength() {
        const offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startDeltaStateMessage(builder) {
        builder.startObject(15);
    }
    static addPlayers(builder, playersOffset) {
        builder.addFieldOffset(0, playersOffset, 0);
    }
    static createPlayersVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startPlayersVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addProjectiles(builder, projectilesOffset) {
        builder.addFieldOffset(1, projectilesOffset, 0);
    }
    static createProjectilesVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startProjectilesVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addPickups(builder, pickupsOffset) {
        builder.addFieldOffset(2, pickupsOffset, 0);
    }
    static createPickupsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startPickupsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addRemovedProjectiles(builder, removedProjectilesOffset) {
        builder.addFieldOffset(3, removedProjectilesOffset, 0);
    }
    static createRemovedProjectilesVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startRemovedProjectilesVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addDestroyedWallIds(builder, destroyedWallIdsOffset) {
        builder.addFieldOffset(4, destroyedWallIdsOffset, 0);
    }
    static createDestroyedWallIdsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startDestroyedWallIdsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addDeactivatedPickupIds(builder, deactivatedPickupIdsOffset) {
        builder.addFieldOffset(5, deactivatedPickupIdsOffset, 0);
    }
    static createDeactivatedPickupIdsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startDeactivatedPickupIdsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addKillFeed(builder, killFeedOffset) {
        builder.addFieldOffset(6, killFeedOffset, 0);
    }
    static createKillFeedVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startKillFeedVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addMatchInfo(builder, matchInfoOffset) {
        builder.addFieldOffset(7, matchInfoOffset, 0);
    }
    static addFlagStates(builder, flagStatesOffset) {
        builder.addFieldOffset(8, flagStatesOffset, 0);
    }
    static createFlagStatesVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startFlagStatesVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addGameEvents(builder, gameEventsOffset) {
        builder.addFieldOffset(9, gameEventsOffset, 0);
    }
    static createGameEventsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startGameEventsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addTimestamp(builder, timestamp) {
        builder.addFieldInt64(10, timestamp, BigInt('0'));
    }
    static addLastProcessedInputSequence(builder, lastProcessedInputSequence) {
        builder.addFieldInt32(11, lastProcessedInputSequence, 0);
    }
    static addChangedPlayerFields(builder, changedPlayerFieldsOffset) {
        builder.addFieldOffset(12, changedPlayerFieldsOffset, 0);
    }
    static createChangedPlayerFieldsVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startChangedPlayerFieldsVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static addRemovedPlayerIds(builder, removedPlayerIdsOffset) {
        builder.addFieldOffset(13, removedPlayerIdsOffset, 0);
    }
    static createRemovedPlayerIdsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startRemovedPlayerIdsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addUpdatedWalls(builder, updatedWallsOffset) {
        builder.addFieldOffset(14, updatedWallsOffset, 0);
    }
    static createUpdatedWallsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startUpdatedWallsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endDeltaStateMessage(builder) {
        const offset = builder.endObject();
        return offset;
    }
}
//# sourceMappingURL=delta-state-message.js.map