// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { MessagePayload, unionToMessagePayload, unionListToMessagePayload } from '../game-protocol/message-payload.js';
import { MessageType } from '../game-protocol/message-type.js';


export class GameMessage {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GameMessage {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGameMessage(bb:flatbuffers.ByteBuffer, obj?:GameMessage):GameMessage {
  return (obj || new GameMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGameMessage(bb:flatbuffers.ByteBuffer, obj?:GameMessage):GameMessage {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GameMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

msgType():MessageType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : MessageType.Welcome;
}

actualMessageType():MessagePayload {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : MessagePayload.NONE;
}

actualMessage<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startGameMessage(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addMsgType(builder:flatbuffers.Builder, msgType:MessageType) {
  builder.addFieldInt8(0, msgType, MessageType.Welcome);
}

static addActualMessageType(builder:flatbuffers.Builder, actualMessageType:MessagePayload) {
  builder.addFieldInt8(1, actualMessageType, MessagePayload.NONE);
}

static addActualMessage(builder:flatbuffers.Builder, actualMessageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, actualMessageOffset, 0);
}

static endGameMessage(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishGameMessageBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedGameMessageBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createGameMessage(builder:flatbuffers.Builder, msgType:MessageType, actualMessageType:MessagePayload, actualMessageOffset:flatbuffers.Offset):flatbuffers.Offset {
  GameMessage.startGameMessage(builder);
  GameMessage.addMsgType(builder, msgType);
  GameMessage.addActualMessageType(builder, actualMessageType);
  GameMessage.addActualMessage(builder, actualMessageOffset);
  return GameMessage.endGameMessage(builder);
}
}
