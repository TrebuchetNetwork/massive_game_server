import * as flatbuffers from 'flatbuffers';
import { FlagState } from '../game-protocol/flag-state.js';
import { MatchInfo } from '../game-protocol/match-info.js';
import { Pickup } from '../game-protocol/pickup.js';
import { PlayerState } from '../game-protocol/player-state.js';
import { ProjectileState } from '../game-protocol/projectile-state.js';
import { Wall } from '../game-protocol/wall.js';
export declare class InitialStateMessage {
    bb: flatbuffers.ByteBuffer | null;
    bb_pos: number;
    __init(i: number, bb: flatbuffers.ByteBuffer): InitialStateMessage;
    static getRootAsInitialStateMessage(bb: flatbuffers.ByteBuffer, obj?: InitialStateMessage): InitialStateMessage;
    static getSizePrefixedRootAsInitialStateMessage(bb: flatbuffers.ByteBuffer, obj?: InitialStateMessage): InitialStateMessage;
    playerId(): string | null;
    playerId(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    walls(index: number, obj?: Wall): Wall | null;
    wallsLength(): number;
    players(index: number, obj?: PlayerState): PlayerState | null;
    playersLength(): number;
    projectiles(index: number, obj?: ProjectileState): ProjectileState | null;
    projectilesLength(): number;
    pickups(index: number, obj?: Pickup): Pickup | null;
    pickupsLength(): number;
    matchInfo(obj?: MatchInfo): MatchInfo | null;
    flagStates(index: number, obj?: FlagState): FlagState | null;
    flagStatesLength(): number;
    timestamp(): bigint;
    mapName(): string | null;
    mapName(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    static startInitialStateMessage(builder: flatbuffers.Builder): void;
    static addPlayerId(builder: flatbuffers.Builder, playerIdOffset: flatbuffers.Offset): void;
    static addWalls(builder: flatbuffers.Builder, wallsOffset: flatbuffers.Offset): void;
    static createWallsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset;
    static startWallsVector(builder: flatbuffers.Builder, numElems: number): void;
    static addPlayers(builder: flatbuffers.Builder, playersOffset: flatbuffers.Offset): void;
    static createPlayersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset;
    static startPlayersVector(builder: flatbuffers.Builder, numElems: number): void;
    static addProjectiles(builder: flatbuffers.Builder, projectilesOffset: flatbuffers.Offset): void;
    static createProjectilesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset;
    static startProjectilesVector(builder: flatbuffers.Builder, numElems: number): void;
    static addPickups(builder: flatbuffers.Builder, pickupsOffset: flatbuffers.Offset): void;
    static createPickupsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset;
    static startPickupsVector(builder: flatbuffers.Builder, numElems: number): void;
    static addMatchInfo(builder: flatbuffers.Builder, matchInfoOffset: flatbuffers.Offset): void;
    static addFlagStates(builder: flatbuffers.Builder, flagStatesOffset: flatbuffers.Offset): void;
    static createFlagStatesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset;
    static startFlagStatesVector(builder: flatbuffers.Builder, numElems: number): void;
    static addTimestamp(builder: flatbuffers.Builder, timestamp: bigint): void;
    static addMapName(builder: flatbuffers.Builder, mapNameOffset: flatbuffers.Offset): void;
    static endInitialStateMessage(builder: flatbuffers.Builder): flatbuffers.Offset;
}
//# sourceMappingURL=initial-state-message.d.ts.map