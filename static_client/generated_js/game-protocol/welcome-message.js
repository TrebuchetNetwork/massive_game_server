// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'https://cdn.jsdelivr.net/npm/flatbuffers@23.5.26/+esm';
export class WelcomeMessage {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsWelcomeMessage(bb, obj) {
        return (obj || new WelcomeMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsWelcomeMessage(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new WelcomeMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    playerId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    message(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    serverTickRate() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readUint16(this.bb_pos + offset) : 30;
    }
    static startWelcomeMessage(builder) {
        builder.startObject(3);
    }
    static addPlayerId(builder, playerIdOffset) {
        builder.addFieldOffset(0, playerIdOffset, 0);
    }
    static addMessage(builder, messageOffset) {
        builder.addFieldOffset(1, messageOffset, 0);
    }
    static addServerTickRate(builder, serverTickRate) {
        builder.addFieldInt16(2, serverTickRate, 30);
    }
    static endWelcomeMessage(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createWelcomeMessage(builder, playerIdOffset, messageOffset, serverTickRate) {
        WelcomeMessage.startWelcomeMessage(builder);
        WelcomeMessage.addPlayerId(builder, playerIdOffset);
        WelcomeMessage.addMessage(builder, messageOffset);
        WelcomeMessage.addServerTickRate(builder, serverTickRate);
        return WelcomeMessage.endWelcomeMessage(builder);
    }
}
//# sourceMappingURL=welcome-message.js.map
