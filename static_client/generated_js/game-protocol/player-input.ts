// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class PlayerInput {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PlayerInput {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPlayerInput(bb:flatbuffers.ByteBuffer, obj?:PlayerInput):PlayerInput {
  return (obj || new PlayerInput()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPlayerInput(bb:flatbuffers.ByteBuffer, obj?:PlayerInput):PlayerInput {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PlayerInput()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

timestamp():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

sequence():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

moveForward():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

moveBackward():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

moveLeft():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

moveRight():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

shooting():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

reload():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

rotation():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

meleeAttack():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

changeWeaponSlot():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

useAbilitySlot():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

static startPlayerInput(builder:flatbuffers.Builder) {
  builder.startObject(12);
}

static addTimestamp(builder:flatbuffers.Builder, timestamp:bigint) {
  builder.addFieldInt64(0, timestamp, BigInt('0'));
}

static addSequence(builder:flatbuffers.Builder, sequence:number) {
  builder.addFieldInt32(1, sequence, 0);
}

static addMoveForward(builder:flatbuffers.Builder, moveForward:boolean) {
  builder.addFieldInt8(2, +moveForward, +false);
}

static addMoveBackward(builder:flatbuffers.Builder, moveBackward:boolean) {
  builder.addFieldInt8(3, +moveBackward, +false);
}

static addMoveLeft(builder:flatbuffers.Builder, moveLeft:boolean) {
  builder.addFieldInt8(4, +moveLeft, +false);
}

static addMoveRight(builder:flatbuffers.Builder, moveRight:boolean) {
  builder.addFieldInt8(5, +moveRight, +false);
}

static addShooting(builder:flatbuffers.Builder, shooting:boolean) {
  builder.addFieldInt8(6, +shooting, +false);
}

static addReload(builder:flatbuffers.Builder, reload:boolean) {
  builder.addFieldInt8(7, +reload, +false);
}

static addRotation(builder:flatbuffers.Builder, rotation:number) {
  builder.addFieldFloat32(8, rotation, 0.0);
}

static addMeleeAttack(builder:flatbuffers.Builder, meleeAttack:boolean) {
  builder.addFieldInt8(9, +meleeAttack, +false);
}

static addChangeWeaponSlot(builder:flatbuffers.Builder, changeWeaponSlot:number) {
  builder.addFieldInt8(10, changeWeaponSlot, 0);
}

static addUseAbilitySlot(builder:flatbuffers.Builder, useAbilitySlot:number) {
  builder.addFieldInt8(11, useAbilitySlot, 0);
}

static endPlayerInput(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPlayerInput(builder:flatbuffers.Builder, timestamp:bigint, sequence:number, moveForward:boolean, moveBackward:boolean, moveLeft:boolean, moveRight:boolean, shooting:boolean, reload:boolean, rotation:number, meleeAttack:boolean, changeWeaponSlot:number, useAbilitySlot:number):flatbuffers.Offset {
  PlayerInput.startPlayerInput(builder);
  PlayerInput.addTimestamp(builder, timestamp);
  PlayerInput.addSequence(builder, sequence);
  PlayerInput.addMoveForward(builder, moveForward);
  PlayerInput.addMoveBackward(builder, moveBackward);
  PlayerInput.addMoveLeft(builder, moveLeft);
  PlayerInput.addMoveRight(builder, moveRight);
  PlayerInput.addShooting(builder, shooting);
  PlayerInput.addReload(builder, reload);
  PlayerInput.addRotation(builder, rotation);
  PlayerInput.addMeleeAttack(builder, meleeAttack);
  PlayerInput.addChangeWeaponSlot(builder, changeWeaponSlot);
  PlayerInput.addUseAbilitySlot(builder, useAbilitySlot);
  return PlayerInput.endPlayerInput(builder);
}
}
