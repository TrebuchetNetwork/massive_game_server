// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
export class PlayerInput {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsPlayerInput(bb, obj) {
        return (obj || new PlayerInput()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsPlayerInput(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new PlayerInput()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    timestamp() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint64(this.bb_pos + offset) : BigInt('0');
    }
    sequence() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    moveForward() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    moveBackward() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    moveLeft() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    moveRight() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    shooting() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    reload() {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    rotation() {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    meleeAttack() {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    changeWeaponSlot() {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
    }
    useAbilitySlot() {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
    }
    static startPlayerInput(builder) {
        builder.startObject(12);
    }
    static addTimestamp(builder, timestamp) {
        builder.addFieldInt64(0, timestamp, BigInt('0'));
    }
    static addSequence(builder, sequence) {
        builder.addFieldInt32(1, sequence, 0);
    }
    static addMoveForward(builder, moveForward) {
        builder.addFieldInt8(2, +moveForward, +false);
    }
    static addMoveBackward(builder, moveBackward) {
        builder.addFieldInt8(3, +moveBackward, +false);
    }
    static addMoveLeft(builder, moveLeft) {
        builder.addFieldInt8(4, +moveLeft, +false);
    }
    static addMoveRight(builder, moveRight) {
        builder.addFieldInt8(5, +moveRight, +false);
    }
    static addShooting(builder, shooting) {
        builder.addFieldInt8(6, +shooting, +false);
    }
    static addReload(builder, reload) {
        builder.addFieldInt8(7, +reload, +false);
    }
    static addRotation(builder, rotation) {
        builder.addFieldFloat32(8, rotation, 0.0);
    }
    static addMeleeAttack(builder, meleeAttack) {
        builder.addFieldInt8(9, +meleeAttack, +false);
    }
    static addChangeWeaponSlot(builder, changeWeaponSlot) {
        builder.addFieldInt8(10, changeWeaponSlot, 0);
    }
    static addUseAbilitySlot(builder, useAbilitySlot) {
        builder.addFieldInt8(11, useAbilitySlot, 0);
    }
    static endPlayerInput(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createPlayerInput(builder, timestamp, sequence, moveForward, moveBackward, moveLeft, moveRight, shooting, reload, rotation, meleeAttack, changeWeaponSlot, useAbilitySlot) {
        PlayerInput.startPlayerInput(builder);
        PlayerInput.addTimestamp(builder, timestamp);
        PlayerInput.addSequence(builder, sequence);
        PlayerInput.addMoveForward(builder, moveForward);
        PlayerInput.addMoveBackward(builder, moveBackward);
        PlayerInput.addMoveLeft(builder, moveLeft);
        PlayerInput.addMoveRight(builder, moveRight);
        PlayerInput.addShooting(builder, shooting);
        PlayerInput.addReload(builder, reload);
        PlayerInput.addRotation(builder, rotation);
        PlayerInput.addMeleeAttack(builder, meleeAttack);
        PlayerInput.addChangeWeaponSlot(builder, changeWeaponSlot);
        PlayerInput.addUseAbilitySlot(builder, useAbilitySlot);
        return PlayerInput.endPlayerInput(builder);
    }
}
//# sourceMappingURL=player-input.js.map