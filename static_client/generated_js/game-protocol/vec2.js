// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
export class Vec2 {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsVec2(bb, obj) {
        return (obj || new Vec2()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsVec2(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Vec2()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    x() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    y() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    static startVec2(builder) {
        builder.startObject(2);
    }
    static addX(builder, x) {
        builder.addFieldFloat32(0, x, 0.0);
    }
    static addY(builder, y) {
        builder.addFieldFloat32(1, y, 0.0);
    }
    static endVec2(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createVec2(builder, x, y) {
        Vec2.startVec2(builder);
        Vec2.addX(builder, x);
        Vec2.addY(builder, y);
        return Vec2.endVec2(builder);
    }
}
//# sourceMappingURL=vec2.js.map