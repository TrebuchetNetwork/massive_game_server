// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { GameModeType } from '../game-protocol/game-mode-type.js';
import { MatchStateType } from '../game-protocol/match-state-type.js';
import { TeamScoreEntry } from '../game-protocol/team-score-entry.js';


export class MatchInfo {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MatchInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMatchInfo(bb:flatbuffers.ByteBuffer, obj?:MatchInfo):MatchInfo {
  return (obj || new MatchInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMatchInfo(bb:flatbuffers.ByteBuffer, obj?:MatchInfo):MatchInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MatchInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

timeRemaining():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

matchState():MatchStateType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : MatchStateType.Waiting;
}

winnerId():string|null
winnerId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
winnerId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

winnerName():string|null
winnerName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
winnerName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

gameMode():GameModeType {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : GameModeType.FreeForAll;
}

teamScores(index: number, obj?:TeamScoreEntry):TeamScoreEntry|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new TeamScoreEntry()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

teamScoresLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startMatchInfo(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addTimeRemaining(builder:flatbuffers.Builder, timeRemaining:number) {
  builder.addFieldFloat32(0, timeRemaining, 0.0);
}

static addMatchState(builder:flatbuffers.Builder, matchState:MatchStateType) {
  builder.addFieldInt8(1, matchState, MatchStateType.Waiting);
}

static addWinnerId(builder:flatbuffers.Builder, winnerIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, winnerIdOffset, 0);
}

static addWinnerName(builder:flatbuffers.Builder, winnerNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, winnerNameOffset, 0);
}

static addGameMode(builder:flatbuffers.Builder, gameMode:GameModeType) {
  builder.addFieldInt8(4, gameMode, GameModeType.FreeForAll);
}

static addTeamScores(builder:flatbuffers.Builder, teamScoresOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, teamScoresOffset, 0);
}

static createTeamScoresVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTeamScoresVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endMatchInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createMatchInfo(builder:flatbuffers.Builder, timeRemaining:number, matchState:MatchStateType, winnerIdOffset:flatbuffers.Offset, winnerNameOffset:flatbuffers.Offset, gameMode:GameModeType, teamScoresOffset:flatbuffers.Offset):flatbuffers.Offset {
  MatchInfo.startMatchInfo(builder);
  MatchInfo.addTimeRemaining(builder, timeRemaining);
  MatchInfo.addMatchState(builder, matchState);
  MatchInfo.addWinnerId(builder, winnerIdOffset);
  MatchInfo.addWinnerName(builder, winnerNameOffset);
  MatchInfo.addGameMode(builder, gameMode);
  MatchInfo.addTeamScores(builder, teamScoresOffset);
  return MatchInfo.endMatchInfo(builder);
}
}
