import * as flatbuffers from 'flatbuffers';
import { WeaponType } from '../game-protocol/weapon-type.js';
export declare class PlayerState {
    bb: flatbuffers.ByteBuffer | null;
    bb_pos: number;
    __init(i: number, bb: flatbuffers.ByteBuffer): PlayerState;
    static getRootAsPlayerState(bb: flatbuffers.ByteBuffer, obj?: PlayerState): PlayerState;
    static getSizePrefixedRootAsPlayerState(bb: flatbuffers.ByteBuffer, obj?: PlayerState): PlayerState;
    id(): string | null;
    id(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    username(): string | null;
    username(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    x(): number;
    y(): number;
    rotation(): number;
    velocityX(): number;
    velocityY(): number;
    health(): number;
    maxHealth(): number;
    alive(): boolean;
    respawnTimer(): number;
    weapon(): WeaponType;
    ammo(): number;
    reloadProgress(): number;
    score(): number;
    kills(): number;
    deaths(): number;
    teamId(): number;
    speedBoostRemaining(): number;
    damageBoostRemaining(): number;
    shieldCurrent(): number;
    shieldMax(): number;
    isCarryingFlagTeamId(): number;
    static startPlayerState(builder: flatbuffers.Builder): void;
    static addId(builder: flatbuffers.Builder, idOffset: flatbuffers.Offset): void;
    static addUsername(builder: flatbuffers.Builder, usernameOffset: flatbuffers.Offset): void;
    static addX(builder: flatbuffers.Builder, x: number): void;
    static addY(builder: flatbuffers.Builder, y: number): void;
    static addRotation(builder: flatbuffers.Builder, rotation: number): void;
    static addVelocityX(builder: flatbuffers.Builder, velocityX: number): void;
    static addVelocityY(builder: flatbuffers.Builder, velocityY: number): void;
    static addHealth(builder: flatbuffers.Builder, health: number): void;
    static addMaxHealth(builder: flatbuffers.Builder, maxHealth: number): void;
    static addAlive(builder: flatbuffers.Builder, alive: boolean): void;
    static addRespawnTimer(builder: flatbuffers.Builder, respawnTimer: number): void;
    static addWeapon(builder: flatbuffers.Builder, weapon: WeaponType): void;
    static addAmmo(builder: flatbuffers.Builder, ammo: number): void;
    static addReloadProgress(builder: flatbuffers.Builder, reloadProgress: number): void;
    static addScore(builder: flatbuffers.Builder, score: number): void;
    static addKills(builder: flatbuffers.Builder, kills: number): void;
    static addDeaths(builder: flatbuffers.Builder, deaths: number): void;
    static addTeamId(builder: flatbuffers.Builder, teamId: number): void;
    static addSpeedBoostRemaining(builder: flatbuffers.Builder, speedBoostRemaining: number): void;
    static addDamageBoostRemaining(builder: flatbuffers.Builder, damageBoostRemaining: number): void;
    static addShieldCurrent(builder: flatbuffers.Builder, shieldCurrent: number): void;
    static addShieldMax(builder: flatbuffers.Builder, shieldMax: number): void;
    static addIsCarryingFlagTeamId(builder: flatbuffers.Builder, isCarryingFlagTeamId: number): void;
    static endPlayerState(builder: flatbuffers.Builder): flatbuffers.Offset;
    static createPlayerState(builder: flatbuffers.Builder, idOffset: flatbuffers.Offset, usernameOffset: flatbuffers.Offset, x: number, y: number, rotation: number, velocityX: number, velocityY: number, health: number, maxHealth: number, alive: boolean, respawnTimer: number, weapon: WeaponType, ammo: number, reloadProgress: number, score: number, kills: number, deaths: number, teamId: number, speedBoostRemaining: number, damageBoostRemaining: number, shieldCurrent: number, shieldMax: number, isCarryingFlagTeamId: number): flatbuffers.Offset;
}
//# sourceMappingURL=player-state.d.ts.map